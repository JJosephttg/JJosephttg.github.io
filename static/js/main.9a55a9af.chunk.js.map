{"version":3,"sources":["components/VerticalNavigationBar/VerticalNavigationBar.module.css","components/ProfileLogo/ProfileLogo.module.css","assets/PortfolioSelfPic.jpg","App.module.css","components/ProfileLogo/ProfileLogo.js","components/VerticalNavigationBar/VerticalNavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProfileLogo","props","sizeStyle","height","size","width","backgroundImage","logo","className","styles","LogoImage","join","style","VerticalNavigationBar","_","NavigationContainer","NavigationDivider","app","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,oBAAsB,mDAAmD,kBAAoB,iDAAiD,YAAc,6C,kBCA9KD,EAAOC,QAAU,CAAC,UAAY,iC,gBCD9BD,EAAOC,QAAU,IAA0B,8C,gBCC3CD,EAAOC,QAAU,CAAC,IAAM,mB,uKCiBTC,EAZK,SAAAC,GAChB,IAAMC,EAAY,CACdC,OAAQF,EAAMG,KACdC,MAAOJ,EAAMG,KACbE,gBAAgB,OAAD,OAASC,IAAT,MAGnB,OACI,yBAAKC,UAAW,CAACC,IAAOC,UAAWT,EAAMO,WAAWG,KAAK,KAAMC,MAAOV,K,gBCC/DW,EATe,SAAAC,GAC1B,OACI,yBAAKN,UAAWC,IAAOM,qBACnB,kBAAC,EAAD,CAAaP,UAAWC,IAAOT,YAAaI,KAAK,SACjD,yBAAKI,UAAWC,IAAOO,sB,gBCIpBC,EARH,SAAAH,GACV,OACE,yBAAKN,UAAWC,IAAOS,KACrB,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACP,EAAD,MAASQ,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9a55a9af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationContainer\":\"VerticalNavigationBar_NavigationContainer__3dI8f\",\"NavigationDivider\":\"VerticalNavigationBar_NavigationDivider__1oqSx\",\"ProfileLogo\":\"VerticalNavigationBar_ProfileLogo__1b3l2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LogoImage\":\"ProfileLogo_LogoImage__2cRtn\"};","module.exports = __webpack_public_path__ + \"static/media/PortfolioSelfPic.63e13bf5.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2pg7l\"};","import React from 'react';\r\n\r\nimport styles from './ProfileLogo.module.css';\r\n\r\nimport logo from '../../assets/PortfolioSelfPic.jpg';\r\n\r\nconst ProfileLogo = props => {\r\n    const sizeStyle = {\r\n        height: props.size, \r\n        width: props.size, \r\n        backgroundImage: `url(${logo})`,\r\n    };\r\n\r\n    return (\r\n        <div className={[styles.LogoImage, props.className].join(\" \")} style={sizeStyle}/>\r\n    );\r\n}\r\n\r\nexport default ProfileLogo;","import React from 'react';\r\n\r\nimport ProfileLogo from '../ProfileLogo/ProfileLogo';\r\n\r\nimport styles from './VerticalNavigationBar.module.css';\r\n\r\nconst VerticalNavigationBar = _ => {\r\n    return (\r\n        <div className={styles.NavigationContainer}>\r\n            <ProfileLogo className={styles.ProfileLogo} size=\"55px\"/>\r\n            <div className={styles.NavigationDivider} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VerticalNavigationBar;","import React from 'react';\n\nimport VerticalNavigationBar from './components/VerticalNavigationBar/VerticalNavigationBar';\n\nimport styles from './App.module.css';\n\nconst app = _ => {\n  return (\n    <div className={styles.App}>\n      <VerticalNavigationBar/>\n    </div>\n  );\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}